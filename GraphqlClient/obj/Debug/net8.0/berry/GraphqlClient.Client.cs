// <auto-generated/>
#nullable enable

namespace GraphqlClient
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscribersResult : global::System.IEquatable<GetSubscribersResult>, IGetSubscribersResult
    {
        public GetSubscribersResult(global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetSubscribers_Subscribers> subscribers)
        {
            Subscribers = subscribers;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetSubscribers_Subscribers> Subscribers { get; }

        public virtual global::System.Boolean Equals(GetSubscribersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Subscribers, other.Subscribers));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSubscribersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Subscribers_elm in Subscribers)
                {
                    hash ^= 397 * Subscribers_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscribers_Subscribers_Subscriber : global::System.IEquatable<GetSubscribers_Subscribers_Subscriber>, IGetSubscribers_Subscribers_Subscriber
    {
        public GetSubscribers_Subscribers_Subscriber(global::System.DateTimeOffset dateOfBirth, global::System.DateTimeOffset? dateOfCreation, global::System.DateTimeOffset? dateOfUpdate, global::System.String email, global::System.String firstName, global::System.Int32 id, global::System.String lastName, global::System.String? patronymic, global::System.String phoneNumber, global::System.Int32 rating, global::System.Int32? tariffId)
        {
            DateOfBirth = dateOfBirth;
            DateOfCreation = dateOfCreation;
            DateOfUpdate = dateOfUpdate;
            Email = email;
            FirstName = firstName;
            Id = id;
            LastName = lastName;
            Patronymic = patronymic;
            PhoneNumber = phoneNumber;
            Rating = rating;
            TariffId = tariffId;
        }

        public global::System.DateTimeOffset DateOfBirth { get; }

        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String Email { get; }

        public global::System.String FirstName { get; }

        public global::System.Int32 Id { get; }

        public global::System.String LastName { get; }

        public global::System.String? Patronymic { get; }

        public global::System.String PhoneNumber { get; }

        public global::System.Int32 Rating { get; }

        public global::System.Int32? TariffId { get; }

        public virtual global::System.Boolean Equals(GetSubscribers_Subscribers_Subscriber? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DateOfBirth.Equals(other.DateOfBirth)) && ((DateOfCreation is null && other.DateOfCreation is null) || DateOfCreation != null && DateOfCreation.Equals(other.DateOfCreation)) && ((DateOfUpdate is null && other.DateOfUpdate is null) || DateOfUpdate != null && DateOfUpdate.Equals(other.DateOfUpdate)) && Email.Equals(other.Email) && FirstName.Equals(other.FirstName) && global::System.Object.Equals(Id, other.Id) && LastName.Equals(other.LastName) && ((Patronymic is null && other.Patronymic is null) || Patronymic != null && Patronymic.Equals(other.Patronymic)) && PhoneNumber.Equals(other.PhoneNumber) && global::System.Object.Equals(Rating, other.Rating) && global::System.Object.Equals(TariffId, other.TariffId);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSubscribers_Subscribers_Subscriber)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DateOfBirth.GetHashCode();
                if (DateOfCreation != null)
                {
                    hash ^= 397 * DateOfCreation.GetHashCode();
                }

                if (DateOfUpdate != null)
                {
                    hash ^= 397 * DateOfUpdate.GetHashCode();
                }

                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * FirstName.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * LastName.GetHashCode();
                if (Patronymic != null)
                {
                    hash ^= 397 * Patronymic.GetHashCode();
                }

                hash ^= 397 * PhoneNumber.GetHashCode();
                hash ^= 397 * Rating.GetHashCode();
                if (TariffId != null)
                {
                    hash ^= 397 * TariffId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetSubscribersResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetSubscribers_Subscribers> Subscribers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetSubscribers_Subscribers
    {
        public global::System.DateTimeOffset DateOfBirth { get; }

        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String Email { get; }

        public global::System.String FirstName { get; }

        public global::System.Int32 Id { get; }

        public global::System.String LastName { get; }

        public global::System.String? Patronymic { get; }

        public global::System.String PhoneNumber { get; }

        public global::System.Int32 Rating { get; }

        public global::System.Int32? TariffId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetSubscribers_Subscribers_Subscriber : IGetSubscribers_Subscribers
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServicesResult : global::System.IEquatable<GetServicesResult>, IGetServicesResult
    {
        public GetServicesResult(global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetServices_Services> services)
        {
            Services = services;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetServices_Services> Services { get; }

        public virtual global::System.Boolean Equals(GetServicesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Services, other.Services));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetServicesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Services_elm in Services)
                {
                    hash ^= 397 * Services_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServices_Services_Service : global::System.IEquatable<GetServices_Services_Service>, IGetServices_Services_Service
    {
        public GetServices_Services_Service(global::System.DateTimeOffset? dateOfCreation, global::System.DateTimeOffset? dateOfUpdate, global::System.String? description, global::System.DateTimeOffset expirationDate, global::System.Int32 id, global::System.Int32 price, global::System.String title)
        {
            DateOfCreation = dateOfCreation;
            DateOfUpdate = dateOfUpdate;
            Description = description;
            ExpirationDate = expirationDate;
            Id = id;
            Price = price;
            Title = title;
        }

        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String? Description { get; }

        public global::System.DateTimeOffset ExpirationDate { get; }

        public global::System.Int32 Id { get; }

        public global::System.Int32 Price { get; }

        public global::System.String Title { get; }

        public virtual global::System.Boolean Equals(GetServices_Services_Service? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DateOfCreation is null && other.DateOfCreation is null) || DateOfCreation != null && DateOfCreation.Equals(other.DateOfCreation))) && ((DateOfUpdate is null && other.DateOfUpdate is null) || DateOfUpdate != null && DateOfUpdate.Equals(other.DateOfUpdate)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && ExpirationDate.Equals(other.ExpirationDate) && global::System.Object.Equals(Id, other.Id) && global::System.Object.Equals(Price, other.Price) && Title.Equals(other.Title);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetServices_Services_Service)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DateOfCreation != null)
                {
                    hash ^= 397 * DateOfCreation.GetHashCode();
                }

                if (DateOfUpdate != null)
                {
                    hash ^= 397 * DateOfUpdate.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * ExpirationDate.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Price.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetServicesResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetServices_Services> Services { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetServices_Services
    {
        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String? Description { get; }

        public global::System.DateTimeOffset ExpirationDate { get; }

        public global::System.Int32 Id { get; }

        public global::System.Int32 Price { get; }

        public global::System.String Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetServices_Services_Service : IGetServices_Services
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffsResult : global::System.IEquatable<GetTariffsResult>, IGetTariffsResult
    {
        public GetTariffsResult(global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetTariffs_Tariffs> tariffs)
        {
            Tariffs = tariffs;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetTariffs_Tariffs> Tariffs { get; }

        public virtual global::System.Boolean Equals(GetTariffsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Tariffs, other.Tariffs));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTariffsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Tariffs_elm in Tariffs)
                {
                    hash ^= 397 * Tariffs_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffs_Tariffs_Tariff : global::System.IEquatable<GetTariffs_Tariffs_Tariff>, IGetTariffs_Tariffs_Tariff
    {
        public GetTariffs_Tariffs_Tariff(global::System.DateTimeOffset? dateOfCreation, global::System.DateTimeOffset? dateOfUpdate, global::System.String? description, global::System.Int32 id, global::System.Int32 internetTrafficLimit, global::System.Int32 minutesLimit, global::System.Int32 price, global::System.Int32 subscriptionFee, global::System.String title, global::System.String typeOfFeeDebit)
        {
            DateOfCreation = dateOfCreation;
            DateOfUpdate = dateOfUpdate;
            Description = description;
            Id = id;
            InternetTrafficLimit = internetTrafficLimit;
            MinutesLimit = minutesLimit;
            Price = price;
            SubscriptionFee = subscriptionFee;
            Title = title;
            TypeOfFeeDebit = typeOfFeeDebit;
        }

        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String? Description { get; }

        public global::System.Int32 Id { get; }

        public global::System.Int32 InternetTrafficLimit { get; }

        public global::System.Int32 MinutesLimit { get; }

        public global::System.Int32 Price { get; }

        public global::System.Int32 SubscriptionFee { get; }

        public global::System.String Title { get; }

        public global::System.String TypeOfFeeDebit { get; }

        public virtual global::System.Boolean Equals(GetTariffs_Tariffs_Tariff? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DateOfCreation is null && other.DateOfCreation is null) || DateOfCreation != null && DateOfCreation.Equals(other.DateOfCreation))) && ((DateOfUpdate is null && other.DateOfUpdate is null) || DateOfUpdate != null && DateOfUpdate.Equals(other.DateOfUpdate)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && global::System.Object.Equals(Id, other.Id) && global::System.Object.Equals(InternetTrafficLimit, other.InternetTrafficLimit) && global::System.Object.Equals(MinutesLimit, other.MinutesLimit) && global::System.Object.Equals(Price, other.Price) && global::System.Object.Equals(SubscriptionFee, other.SubscriptionFee) && Title.Equals(other.Title) && TypeOfFeeDebit.Equals(other.TypeOfFeeDebit);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTariffs_Tariffs_Tariff)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DateOfCreation != null)
                {
                    hash ^= 397 * DateOfCreation.GetHashCode();
                }

                if (DateOfUpdate != null)
                {
                    hash ^= 397 * DateOfUpdate.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * InternetTrafficLimit.GetHashCode();
                hash ^= 397 * MinutesLimit.GetHashCode();
                hash ^= 397 * Price.GetHashCode();
                hash ^= 397 * SubscriptionFee.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * TypeOfFeeDebit.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetTariffsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetTariffs_Tariffs> Tariffs { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetTariffs_Tariffs
    {
        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String? Description { get; }

        public global::System.Int32 Id { get; }

        public global::System.Int32 InternetTrafficLimit { get; }

        public global::System.Int32 MinutesLimit { get; }

        public global::System.Int32 Price { get; }

        public global::System.Int32 SubscriptionFee { get; }

        public global::System.String Title { get; }

        public global::System.String TypeOfFeeDebit { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetTariffs_Tariffs_Tariff : IGetTariffs_Tariffs
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscriberResult : global::System.IEquatable<GetSubscriberResult>, IGetSubscriberResult
    {
        public GetSubscriberResult(global::GraphqlClient.IGetSubscriber_Subscriber? subscriber)
        {
            Subscriber = subscriber;
        }

        public global::GraphqlClient.IGetSubscriber_Subscriber? Subscriber { get; }

        public virtual global::System.Boolean Equals(GetSubscriberResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Subscriber is null && other.Subscriber is null) || Subscriber != null && Subscriber.Equals(other.Subscriber)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSubscriberResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Subscriber != null)
                {
                    hash ^= 397 * Subscriber.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscriber_Subscriber_Subscriber : global::System.IEquatable<GetSubscriber_Subscriber_Subscriber>, IGetSubscriber_Subscriber_Subscriber
    {
        public GetSubscriber_Subscriber_Subscriber(global::System.DateTimeOffset dateOfBirth, global::System.DateTimeOffset? dateOfCreation, global::System.DateTimeOffset? dateOfUpdate, global::System.String email, global::System.String firstName, global::System.Int32 id, global::System.String lastName, global::System.String? patronymic, global::System.String phoneNumber, global::System.Int32 rating, global::System.Int32? tariffId)
        {
            DateOfBirth = dateOfBirth;
            DateOfCreation = dateOfCreation;
            DateOfUpdate = dateOfUpdate;
            Email = email;
            FirstName = firstName;
            Id = id;
            LastName = lastName;
            Patronymic = patronymic;
            PhoneNumber = phoneNumber;
            Rating = rating;
            TariffId = tariffId;
        }

        public global::System.DateTimeOffset DateOfBirth { get; }

        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String Email { get; }

        public global::System.String FirstName { get; }

        public global::System.Int32 Id { get; }

        public global::System.String LastName { get; }

        public global::System.String? Patronymic { get; }

        public global::System.String PhoneNumber { get; }

        public global::System.Int32 Rating { get; }

        public global::System.Int32? TariffId { get; }

        public virtual global::System.Boolean Equals(GetSubscriber_Subscriber_Subscriber? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DateOfBirth.Equals(other.DateOfBirth)) && ((DateOfCreation is null && other.DateOfCreation is null) || DateOfCreation != null && DateOfCreation.Equals(other.DateOfCreation)) && ((DateOfUpdate is null && other.DateOfUpdate is null) || DateOfUpdate != null && DateOfUpdate.Equals(other.DateOfUpdate)) && Email.Equals(other.Email) && FirstName.Equals(other.FirstName) && global::System.Object.Equals(Id, other.Id) && LastName.Equals(other.LastName) && ((Patronymic is null && other.Patronymic is null) || Patronymic != null && Patronymic.Equals(other.Patronymic)) && PhoneNumber.Equals(other.PhoneNumber) && global::System.Object.Equals(Rating, other.Rating) && global::System.Object.Equals(TariffId, other.TariffId);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSubscriber_Subscriber_Subscriber)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DateOfBirth.GetHashCode();
                if (DateOfCreation != null)
                {
                    hash ^= 397 * DateOfCreation.GetHashCode();
                }

                if (DateOfUpdate != null)
                {
                    hash ^= 397 * DateOfUpdate.GetHashCode();
                }

                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * FirstName.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * LastName.GetHashCode();
                if (Patronymic != null)
                {
                    hash ^= 397 * Patronymic.GetHashCode();
                }

                hash ^= 397 * PhoneNumber.GetHashCode();
                hash ^= 397 * Rating.GetHashCode();
                if (TariffId != null)
                {
                    hash ^= 397 * TariffId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetSubscriberResult
    {
        public global::GraphqlClient.IGetSubscriber_Subscriber? Subscriber { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetSubscriber_Subscriber
    {
        public global::System.DateTimeOffset DateOfBirth { get; }

        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String Email { get; }

        public global::System.String FirstName { get; }

        public global::System.Int32 Id { get; }

        public global::System.String LastName { get; }

        public global::System.String? Patronymic { get; }

        public global::System.String PhoneNumber { get; }

        public global::System.Int32 Rating { get; }

        public global::System.Int32? TariffId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetSubscriber_Subscriber_Subscriber : IGetSubscriber_Subscriber
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffResult : global::System.IEquatable<GetTariffResult>, IGetTariffResult
    {
        public GetTariffResult(global::GraphqlClient.IGetTariff_Tariff? tariff)
        {
            Tariff = tariff;
        }

        public global::GraphqlClient.IGetTariff_Tariff? Tariff { get; }

        public virtual global::System.Boolean Equals(GetTariffResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Tariff is null && other.Tariff is null) || Tariff != null && Tariff.Equals(other.Tariff)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTariffResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Tariff != null)
                {
                    hash ^= 397 * Tariff.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariff_Tariff_Tariff : global::System.IEquatable<GetTariff_Tariff_Tariff>, IGetTariff_Tariff_Tariff
    {
        public GetTariff_Tariff_Tariff(global::System.DateTimeOffset? dateOfCreation, global::System.DateTimeOffset? dateOfUpdate, global::System.String? description, global::System.Int32 id, global::System.Int32 internetTrafficLimit, global::System.Int32 minutesLimit, global::System.Int32 price, global::System.Int32 subscriptionFee, global::System.String title, global::System.String typeOfFeeDebit)
        {
            DateOfCreation = dateOfCreation;
            DateOfUpdate = dateOfUpdate;
            Description = description;
            Id = id;
            InternetTrafficLimit = internetTrafficLimit;
            MinutesLimit = minutesLimit;
            Price = price;
            SubscriptionFee = subscriptionFee;
            Title = title;
            TypeOfFeeDebit = typeOfFeeDebit;
        }

        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String? Description { get; }

        public global::System.Int32 Id { get; }

        public global::System.Int32 InternetTrafficLimit { get; }

        public global::System.Int32 MinutesLimit { get; }

        public global::System.Int32 Price { get; }

        public global::System.Int32 SubscriptionFee { get; }

        public global::System.String Title { get; }

        public global::System.String TypeOfFeeDebit { get; }

        public virtual global::System.Boolean Equals(GetTariff_Tariff_Tariff? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DateOfCreation is null && other.DateOfCreation is null) || DateOfCreation != null && DateOfCreation.Equals(other.DateOfCreation))) && ((DateOfUpdate is null && other.DateOfUpdate is null) || DateOfUpdate != null && DateOfUpdate.Equals(other.DateOfUpdate)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && global::System.Object.Equals(Id, other.Id) && global::System.Object.Equals(InternetTrafficLimit, other.InternetTrafficLimit) && global::System.Object.Equals(MinutesLimit, other.MinutesLimit) && global::System.Object.Equals(Price, other.Price) && global::System.Object.Equals(SubscriptionFee, other.SubscriptionFee) && Title.Equals(other.Title) && TypeOfFeeDebit.Equals(other.TypeOfFeeDebit);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTariff_Tariff_Tariff)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DateOfCreation != null)
                {
                    hash ^= 397 * DateOfCreation.GetHashCode();
                }

                if (DateOfUpdate != null)
                {
                    hash ^= 397 * DateOfUpdate.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * InternetTrafficLimit.GetHashCode();
                hash ^= 397 * MinutesLimit.GetHashCode();
                hash ^= 397 * Price.GetHashCode();
                hash ^= 397 * SubscriptionFee.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * TypeOfFeeDebit.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetTariffResult
    {
        public global::GraphqlClient.IGetTariff_Tariff? Tariff { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetTariff_Tariff
    {
        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String? Description { get; }

        public global::System.Int32 Id { get; }

        public global::System.Int32 InternetTrafficLimit { get; }

        public global::System.Int32 MinutesLimit { get; }

        public global::System.Int32 Price { get; }

        public global::System.Int32 SubscriptionFee { get; }

        public global::System.String Title { get; }

        public global::System.String TypeOfFeeDebit { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetTariff_Tariff_Tariff : IGetTariff_Tariff
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServiceResult : global::System.IEquatable<GetServiceResult>, IGetServiceResult
    {
        public GetServiceResult(global::GraphqlClient.IGetService_Service? service)
        {
            Service = service;
        }

        public global::GraphqlClient.IGetService_Service? Service { get; }

        public virtual global::System.Boolean Equals(GetServiceResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Service is null && other.Service is null) || Service != null && Service.Equals(other.Service)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetServiceResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Service != null)
                {
                    hash ^= 397 * Service.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetService_Service_Service : global::System.IEquatable<GetService_Service_Service>, IGetService_Service_Service
    {
        public GetService_Service_Service(global::System.DateTimeOffset? dateOfCreation, global::System.DateTimeOffset? dateOfUpdate, global::System.String? description, global::System.DateTimeOffset expirationDate, global::System.Int32 id, global::System.Int32 price, global::System.String title)
        {
            DateOfCreation = dateOfCreation;
            DateOfUpdate = dateOfUpdate;
            Description = description;
            ExpirationDate = expirationDate;
            Id = id;
            Price = price;
            Title = title;
        }

        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String? Description { get; }

        public global::System.DateTimeOffset ExpirationDate { get; }

        public global::System.Int32 Id { get; }

        public global::System.Int32 Price { get; }

        public global::System.String Title { get; }

        public virtual global::System.Boolean Equals(GetService_Service_Service? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DateOfCreation is null && other.DateOfCreation is null) || DateOfCreation != null && DateOfCreation.Equals(other.DateOfCreation))) && ((DateOfUpdate is null && other.DateOfUpdate is null) || DateOfUpdate != null && DateOfUpdate.Equals(other.DateOfUpdate)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && ExpirationDate.Equals(other.ExpirationDate) && global::System.Object.Equals(Id, other.Id) && global::System.Object.Equals(Price, other.Price) && Title.Equals(other.Title);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetService_Service_Service)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DateOfCreation != null)
                {
                    hash ^= 397 * DateOfCreation.GetHashCode();
                }

                if (DateOfUpdate != null)
                {
                    hash ^= 397 * DateOfUpdate.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * ExpirationDate.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Price.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetServiceResult
    {
        public global::GraphqlClient.IGetService_Service? Service { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetService_Service
    {
        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String? Description { get; }

        public global::System.DateTimeOffset ExpirationDate { get; }

        public global::System.Int32 Id { get; }

        public global::System.Int32 Price { get; }

        public global::System.String Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetService_Service_Service : IGetService_Service
    {
    }

    /// <summary>
    /// Represents the operation service of the GetSubscribers GraphQL operation
    /// <code>
    /// query GetSubscribers {
    ///   subscribers {
    ///     __typename
    ///     dateOfBirth
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     email
    ///     firstName
    ///     id
    ///     lastName
    ///     patronymic
    ///     phoneNumber
    ///     rating
    ///     tariffId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscribersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetSubscribersQueryDocument()
        {
        }

        public static GetSubscribersQueryDocument Instance { get; } = new GetSubscribersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x63, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7713ebb7158a48406faa4bdb54ba2d21");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSubscribers GraphQL operation
    /// <code>
    /// query GetSubscribers {
    ///   subscribers {
    ///     __typename
    ///     dateOfBirth
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     email
    ///     firstName
    ///     id
    ///     lastName
    ///     patronymic
    ///     phoneNumber
    ///     rating
    ///     tariffId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscribersQuery : global::GraphqlClient.IGetSubscribersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSubscribersResult> _operationExecutor;
        public GetSubscribersQuery(global::StrawberryShake.IOperationExecutor<IGetSubscribersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSubscribersResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSubscribersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSubscribersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetSubscribersQueryDocument.Instance.Hash.Value, name: "GetSubscribers", document: GetSubscribersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSubscribers GraphQL operation
    /// <code>
    /// query GetSubscribers {
    ///   subscribers {
    ///     __typename
    ///     dateOfBirth
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     email
    ///     firstName
    ///     id
    ///     lastName
    ///     patronymic
    ///     phoneNumber
    ///     rating
    ///     tariffId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetSubscribersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSubscribersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSubscribersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetServices GraphQL operation
    /// <code>
    /// query GetServices {
    ///   services {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     expirationDate
    ///     id
    ///     price
    ///     title
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServicesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetServicesQueryDocument()
        {
        }

        public static GetServicesQueryDocument Instance { get; } = new GetServicesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x20, 0x69, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "51a492048e7335b2eba21db872dd62c4");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetServices GraphQL operation
    /// <code>
    /// query GetServices {
    ///   services {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     expirationDate
    ///     id
    ///     price
    ///     title
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServicesQuery : global::GraphqlClient.IGetServicesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetServicesResult> _operationExecutor;
        public GetServicesQuery(global::StrawberryShake.IOperationExecutor<IGetServicesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetServicesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetServicesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetServicesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetServicesQueryDocument.Instance.Hash.Value, name: "GetServices", document: GetServicesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetServices GraphQL operation
    /// <code>
    /// query GetServices {
    ///   services {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     expirationDate
    ///     id
    ///     price
    ///     title
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetServicesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetServicesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetServicesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetTariffs GraphQL operation
    /// <code>
    /// query GetTariffs {
    ///   tariffs {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     id
    ///     internetTrafficLimit
    ///     minutesLimit
    ///     price
    ///     subscriptionFee
    ///     title
    ///     typeOfFeeDebit
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetTariffsQueryDocument()
        {
        }

        public static GetTariffsQueryDocument Instance { get; } = new GetTariffsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x20, 0x7b, 0x20, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x46, 0x65, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fce52694e41d4247b7d6e0472449a7b3");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTariffs GraphQL operation
    /// <code>
    /// query GetTariffs {
    ///   tariffs {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     id
    ///     internetTrafficLimit
    ///     minutesLimit
    ///     price
    ///     subscriptionFee
    ///     title
    ///     typeOfFeeDebit
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffsQuery : global::GraphqlClient.IGetTariffsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetTariffsResult> _operationExecutor;
        public GetTariffsQuery(global::StrawberryShake.IOperationExecutor<IGetTariffsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetTariffsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTariffsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTariffsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetTariffsQueryDocument.Instance.Hash.Value, name: "GetTariffs", document: GetTariffsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTariffs GraphQL operation
    /// <code>
    /// query GetTariffs {
    ///   tariffs {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     id
    ///     internetTrafficLimit
    ///     minutesLimit
    ///     price
    ///     subscriptionFee
    ///     title
    ///     typeOfFeeDebit
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetTariffsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTariffsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTariffsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetSubscriber GraphQL operation
    /// <code>
    /// query GetSubscriber($id: Int!) {
    ///   subscriber(id: $id) {
    ///     __typename
    ///     dateOfBirth
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     email
    ///     firstName
    ///     id
    ///     lastName
    ///     patronymic
    ///     phoneNumber
    ///     rating
    ///     tariffId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscriberQueryDocument : global::StrawberryShake.IDocument
    {
        private GetSubscriberQueryDocument()
        {
        }

        public static GetSubscriberQueryDocument Instance { get; } = new GetSubscriberQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x63, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "aea4eaf8d893935a6b528abb673d1419");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSubscriber GraphQL operation
    /// <code>
    /// query GetSubscriber($id: Int!) {
    ///   subscriber(id: $id) {
    ///     __typename
    ///     dateOfBirth
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     email
    ///     firstName
    ///     id
    ///     lastName
    ///     patronymic
    ///     phoneNumber
    ///     rating
    ///     tariffId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscriberQuery : global::GraphqlClient.IGetSubscriberQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSubscriberResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetSubscriberQuery(global::StrawberryShake.IOperationExecutor<IGetSubscriberResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSubscriberResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSubscriberResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSubscriberResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetSubscriberQueryDocument.Instance.Hash.Value, name: "GetSubscriber", document: GetSubscriberQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSubscriber GraphQL operation
    /// <code>
    /// query GetSubscriber($id: Int!) {
    ///   subscriber(id: $id) {
    ///     __typename
    ///     dateOfBirth
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     email
    ///     firstName
    ///     id
    ///     lastName
    ///     patronymic
    ///     phoneNumber
    ///     rating
    ///     tariffId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetSubscriberQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSubscriberResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSubscriberResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetTariff GraphQL operation
    /// <code>
    /// query GetTariff($id: Int!) {
    ///   tariff(id: $id) {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     id
    ///     internetTrafficLimit
    ///     minutesLimit
    ///     price
    ///     subscriptionFee
    ///     title
    ///     typeOfFeeDebit
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffQueryDocument : global::StrawberryShake.IDocument
    {
        private GetTariffQueryDocument()
        {
        }

        public static GetTariffQueryDocument Instance { get; } = new GetTariffQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x46, 0x65, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d17539228cbb8dbf379962a588f2ddd9");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTariff GraphQL operation
    /// <code>
    /// query GetTariff($id: Int!) {
    ///   tariff(id: $id) {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     id
    ///     internetTrafficLimit
    ///     minutesLimit
    ///     price
    ///     subscriptionFee
    ///     title
    ///     typeOfFeeDebit
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffQuery : global::GraphqlClient.IGetTariffQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetTariffResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetTariffQuery(global::StrawberryShake.IOperationExecutor<IGetTariffResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetTariffResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTariffResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTariffResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetTariffQueryDocument.Instance.Hash.Value, name: "GetTariff", document: GetTariffQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTariff GraphQL operation
    /// <code>
    /// query GetTariff($id: Int!) {
    ///   tariff(id: $id) {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     id
    ///     internetTrafficLimit
    ///     minutesLimit
    ///     price
    ///     subscriptionFee
    ///     title
    ///     typeOfFeeDebit
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetTariffQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTariffResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTariffResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetService GraphQL operation
    /// <code>
    /// query GetService($id: Int!) {
    ///   service(id: $id) {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     expirationDate
    ///     id
    ///     price
    ///     title
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServiceQueryDocument : global::StrawberryShake.IDocument
    {
        private GetServiceQueryDocument()
        {
        }

        public static GetServiceQueryDocument Instance { get; } = new GetServiceQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x20, 0x69, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d9aba1c1a6391108360acf6ec4c5a108");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetService GraphQL operation
    /// <code>
    /// query GetService($id: Int!) {
    ///   service(id: $id) {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     expirationDate
    ///     id
    ///     price
    ///     title
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServiceQuery : global::GraphqlClient.IGetServiceQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetServiceResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetServiceQuery(global::StrawberryShake.IOperationExecutor<IGetServiceResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetServiceResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetServiceResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetServiceResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetServiceQueryDocument.Instance.Hash.Value, name: "GetService", document: GetServiceQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetService GraphQL operation
    /// <code>
    /// query GetService($id: Int!) {
    ///   service(id: $id) {
    ///     __typename
    ///     dateOfCreation
    ///     dateOfUpdate
    ///     description
    ///     expirationDate
    ///     id
    ///     price
    ///     title
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGetServiceQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetServiceResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetServiceResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GraphqlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GraphqlClient : global::GraphqlClient.IGraphqlClient
    {
        private readonly global::GraphqlClient.IGetSubscribersQuery _getSubscribers;
        private readonly global::GraphqlClient.IGetServicesQuery _getServices;
        private readonly global::GraphqlClient.IGetTariffsQuery _getTariffs;
        private readonly global::GraphqlClient.IGetSubscriberQuery _getSubscriber;
        private readonly global::GraphqlClient.IGetTariffQuery _getTariff;
        private readonly global::GraphqlClient.IGetServiceQuery _getService;
        public GraphqlClient(global::GraphqlClient.IGetSubscribersQuery getSubscribers, global::GraphqlClient.IGetServicesQuery getServices, global::GraphqlClient.IGetTariffsQuery getTariffs, global::GraphqlClient.IGetSubscriberQuery getSubscriber, global::GraphqlClient.IGetTariffQuery getTariff, global::GraphqlClient.IGetServiceQuery getService)
        {
            _getSubscribers = getSubscribers ?? throw new global::System.ArgumentNullException(nameof(getSubscribers));
            _getServices = getServices ?? throw new global::System.ArgumentNullException(nameof(getServices));
            _getTariffs = getTariffs ?? throw new global::System.ArgumentNullException(nameof(getTariffs));
            _getSubscriber = getSubscriber ?? throw new global::System.ArgumentNullException(nameof(getSubscriber));
            _getTariff = getTariff ?? throw new global::System.ArgumentNullException(nameof(getTariff));
            _getService = getService ?? throw new global::System.ArgumentNullException(nameof(getService));
        }

        public static global::System.String ClientName => "GraphqlClient";
        public global::GraphqlClient.IGetSubscribersQuery GetSubscribers => _getSubscribers;
        public global::GraphqlClient.IGetServicesQuery GetServices => _getServices;
        public global::GraphqlClient.IGetTariffsQuery GetTariffs => _getTariffs;
        public global::GraphqlClient.IGetSubscriberQuery GetSubscriber => _getSubscriber;
        public global::GraphqlClient.IGetTariffQuery GetTariff => _getTariff;
        public global::GraphqlClient.IGetServiceQuery GetService => _getService;
    }

    /// <summary>
    /// Represents the GraphqlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial interface IGraphqlClient
    {
        global::GraphqlClient.IGetSubscribersQuery GetSubscribers { get; }

        global::GraphqlClient.IGetServicesQuery GetServices { get; }

        global::GraphqlClient.IGetTariffsQuery GetTariffs { get; }

        global::GraphqlClient.IGetSubscriberQuery GetSubscriber { get; }

        global::GraphqlClient.IGetTariffQuery GetTariff { get; }

        global::GraphqlClient.IGetServiceQuery GetService { get; }
    }
}

namespace GraphqlClient.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscribersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.GetSubscribersResult>
    {
        public GetSubscribersResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphqlClient.IGetSubscribersResult);
        public GetSubscribersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetSubscribersResultInfo info)
            {
                return new GetSubscribersResult(MapNonNullableIGetSubscribers_SubscribersNonNullableArray(info.Subscribers));
            }

            throw new global::System.ArgumentException("GetSubscribersResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetSubscribers_Subscribers> MapNonNullableIGetSubscribers_SubscribersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.SubscriberData>? list)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var subscribers = new global::System.Collections.Generic.List<global::GraphqlClient.IGetSubscribers_Subscribers>();
            foreach (global::GraphqlClient.State.SubscriberData child in list)
            {
                subscribers.Add(MapNonNullableIGetSubscribers_Subscribers(child));
            }

            return subscribers;
        }

        private global::GraphqlClient.IGetSubscribers_Subscribers MapNonNullableIGetSubscribers_Subscribers(global::GraphqlClient.State.SubscriberData data)
        {
            IGetSubscribers_Subscribers returnValue = default !;
            if (data.__typename.Equals("Subscriber", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetSubscribers_Subscribers_Subscriber(data.DateOfBirth ?? throw new global::System.ArgumentNullException(), data.DateOfCreation, data.DateOfUpdate, data.Email ?? throw new global::System.ArgumentNullException(), data.FirstName ?? throw new global::System.ArgumentNullException(), data.Id ?? throw new global::System.ArgumentNullException(), data.LastName ?? throw new global::System.ArgumentNullException(), data.Patronymic, data.PhoneNumber ?? throw new global::System.ArgumentNullException(), data.Rating ?? throw new global::System.ArgumentNullException(), data.TariffId);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscribersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetSubscribersResultInfo(global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.SubscriberData> subscribers)
        {
            Subscribers = subscribers;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.SubscriberData> Subscribers { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSubscribersResultInfo(Subscribers);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServicesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.GetServicesResult>
    {
        public GetServicesResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphqlClient.IGetServicesResult);
        public GetServicesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetServicesResultInfo info)
            {
                return new GetServicesResult(MapNonNullableIGetServices_ServicesNonNullableArray(info.Services));
            }

            throw new global::System.ArgumentException("GetServicesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetServices_Services> MapNonNullableIGetServices_ServicesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.ServiceData>? list)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var services = new global::System.Collections.Generic.List<global::GraphqlClient.IGetServices_Services>();
            foreach (global::GraphqlClient.State.ServiceData child in list)
            {
                services.Add(MapNonNullableIGetServices_Services(child));
            }

            return services;
        }

        private global::GraphqlClient.IGetServices_Services MapNonNullableIGetServices_Services(global::GraphqlClient.State.ServiceData data)
        {
            IGetServices_Services returnValue = default !;
            if (data.__typename.Equals("Service", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetServices_Services_Service(data.DateOfCreation, data.DateOfUpdate, data.Description, data.ExpirationDate ?? throw new global::System.ArgumentNullException(), data.Id ?? throw new global::System.ArgumentNullException(), data.Price ?? throw new global::System.ArgumentNullException(), data.Title ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServicesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetServicesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.ServiceData> services)
        {
            Services = services;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.ServiceData> Services { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetServicesResultInfo(Services);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.GetTariffsResult>
    {
        public GetTariffsResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphqlClient.IGetTariffsResult);
        public GetTariffsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetTariffsResultInfo info)
            {
                return new GetTariffsResult(MapNonNullableIGetTariffs_TariffsNonNullableArray(info.Tariffs));
            }

            throw new global::System.ArgumentException("GetTariffsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.IGetTariffs_Tariffs> MapNonNullableIGetTariffs_TariffsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.TariffData>? list)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var tariffs = new global::System.Collections.Generic.List<global::GraphqlClient.IGetTariffs_Tariffs>();
            foreach (global::GraphqlClient.State.TariffData child in list)
            {
                tariffs.Add(MapNonNullableIGetTariffs_Tariffs(child));
            }

            return tariffs;
        }

        private global::GraphqlClient.IGetTariffs_Tariffs MapNonNullableIGetTariffs_Tariffs(global::GraphqlClient.State.TariffData data)
        {
            IGetTariffs_Tariffs returnValue = default !;
            if (data.__typename.Equals("Tariff", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetTariffs_Tariffs_Tariff(data.DateOfCreation, data.DateOfUpdate, data.Description, data.Id ?? throw new global::System.ArgumentNullException(), data.InternetTrafficLimit ?? throw new global::System.ArgumentNullException(), data.MinutesLimit ?? throw new global::System.ArgumentNullException(), data.Price ?? throw new global::System.ArgumentNullException(), data.SubscriptionFee ?? throw new global::System.ArgumentNullException(), data.Title ?? throw new global::System.ArgumentNullException(), data.TypeOfFeeDebit ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetTariffsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.TariffData> tariffs)
        {
            Tariffs = tariffs;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.TariffData> Tariffs { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetTariffsResultInfo(Tariffs);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscriberResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.GetSubscriberResult>
    {
        public GetSubscriberResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphqlClient.IGetSubscriberResult);
        public GetSubscriberResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetSubscriberResultInfo info)
            {
                return new GetSubscriberResult(MapIGetSubscriber_Subscriber(info.Subscriber));
            }

            throw new global::System.ArgumentException("GetSubscriberResultInfo expected.");
        }

        private global::GraphqlClient.IGetSubscriber_Subscriber? MapIGetSubscriber_Subscriber(global::GraphqlClient.State.SubscriberData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetSubscriber_Subscriber returnValue = default !;
            if (data?.__typename.Equals("Subscriber", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSubscriber_Subscriber_Subscriber(data.DateOfBirth ?? throw new global::System.ArgumentNullException(), data.DateOfCreation, data.DateOfUpdate, data.Email ?? throw new global::System.ArgumentNullException(), data.FirstName ?? throw new global::System.ArgumentNullException(), data.Id ?? throw new global::System.ArgumentNullException(), data.LastName ?? throw new global::System.ArgumentNullException(), data.Patronymic, data.PhoneNumber ?? throw new global::System.ArgumentNullException(), data.Rating ?? throw new global::System.ArgumentNullException(), data.TariffId);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscriberResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetSubscriberResultInfo(global::GraphqlClient.State.SubscriberData? subscriber)
        {
            Subscriber = subscriber;
        }

        public global::GraphqlClient.State.SubscriberData? Subscriber { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSubscriberResultInfo(Subscriber);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.GetTariffResult>
    {
        public GetTariffResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphqlClient.IGetTariffResult);
        public GetTariffResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetTariffResultInfo info)
            {
                return new GetTariffResult(MapIGetTariff_Tariff(info.Tariff));
            }

            throw new global::System.ArgumentException("GetTariffResultInfo expected.");
        }

        private global::GraphqlClient.IGetTariff_Tariff? MapIGetTariff_Tariff(global::GraphqlClient.State.TariffData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetTariff_Tariff returnValue = default !;
            if (data?.__typename.Equals("Tariff", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetTariff_Tariff_Tariff(data.DateOfCreation, data.DateOfUpdate, data.Description, data.Id ?? throw new global::System.ArgumentNullException(), data.InternetTrafficLimit ?? throw new global::System.ArgumentNullException(), data.MinutesLimit ?? throw new global::System.ArgumentNullException(), data.Price ?? throw new global::System.ArgumentNullException(), data.SubscriptionFee ?? throw new global::System.ArgumentNullException(), data.Title ?? throw new global::System.ArgumentNullException(), data.TypeOfFeeDebit ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetTariffResultInfo(global::GraphqlClient.State.TariffData? tariff)
        {
            Tariff = tariff;
        }

        public global::GraphqlClient.State.TariffData? Tariff { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetTariffResultInfo(Tariff);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServiceResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.GetServiceResult>
    {
        public GetServiceResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphqlClient.IGetServiceResult);
        public GetServiceResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetServiceResultInfo info)
            {
                return new GetServiceResult(MapIGetService_Service(info.Service));
            }

            throw new global::System.ArgumentException("GetServiceResultInfo expected.");
        }

        private global::GraphqlClient.IGetService_Service? MapIGetService_Service(global::GraphqlClient.State.ServiceData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetService_Service returnValue = default !;
            if (data?.__typename.Equals("Service", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetService_Service_Service(data.DateOfCreation, data.DateOfUpdate, data.Description, data.ExpirationDate ?? throw new global::System.ArgumentNullException(), data.Id ?? throw new global::System.ArgumentNullException(), data.Price ?? throw new global::System.ArgumentNullException(), data.Title ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServiceResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetServiceResultInfo(global::GraphqlClient.State.ServiceData? service)
        {
            Service = service;
        }

        public global::GraphqlClient.State.ServiceData? Service { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetServiceResultInfo(Service);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscribersBuilder : global::StrawberryShake.OperationResultBuilder<global::GraphqlClient.IGetSubscribersResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetSubscribersBuilder(global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetSubscribersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetSubscribersResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetSubscribersResultInfo(Deserialize_NonNullableIGetSubscribers_SubscribersNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subscribers")));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.SubscriberData> Deserialize_NonNullableIGetSubscribers_SubscribersNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var subscribers = new global::System.Collections.Generic.List<global::GraphqlClient.State.SubscriberData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                subscribers.Add(Deserialize_NonNullableIGetSubscribers_Subscribers(child));
            }

            return subscribers;
        }

        private global::GraphqlClient.State.SubscriberData Deserialize_NonNullableIGetSubscribers_Subscribers(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Subscriber", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphqlClient.State.SubscriberData(typename, dateOfBirth: Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfBirth")), dateOfCreation: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfCreation")), dateOfUpdate: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfUpdate")), email: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), firstName: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")), id: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), lastName: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), patronymic: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "patronymic")), phoneNumber: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phoneNumber")), rating: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rating")), tariffId: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tariffId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? Deserialize_DateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? Deserialize_Int32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServicesBuilder : global::StrawberryShake.OperationResultBuilder<global::GraphqlClient.IGetServicesResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetServicesBuilder(global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetServicesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetServicesResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetServicesResultInfo(Deserialize_NonNullableIGetServices_ServicesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "services")));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.ServiceData> Deserialize_NonNullableIGetServices_ServicesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var services = new global::System.Collections.Generic.List<global::GraphqlClient.State.ServiceData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                services.Add(Deserialize_NonNullableIGetServices_Services(child));
            }

            return services;
        }

        private global::GraphqlClient.State.ServiceData Deserialize_NonNullableIGetServices_Services(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Service", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphqlClient.State.ServiceData(typename, dateOfCreation: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfCreation")), dateOfUpdate: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfUpdate")), description: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), expirationDate: Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expirationDate")), id: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), price: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), title: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset? Deserialize_DateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffsBuilder : global::StrawberryShake.OperationResultBuilder<global::GraphqlClient.IGetTariffsResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetTariffsBuilder(global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetTariffsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetTariffsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetTariffsResultInfo(Deserialize_NonNullableIGetTariffs_TariffsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tariffs")));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphqlClient.State.TariffData> Deserialize_NonNullableIGetTariffs_TariffsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var tariffs = new global::System.Collections.Generic.List<global::GraphqlClient.State.TariffData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                tariffs.Add(Deserialize_NonNullableIGetTariffs_Tariffs(child));
            }

            return tariffs;
        }

        private global::GraphqlClient.State.TariffData Deserialize_NonNullableIGetTariffs_Tariffs(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Tariff", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphqlClient.State.TariffData(typename, dateOfCreation: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfCreation")), dateOfUpdate: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfUpdate")), description: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), id: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), internetTrafficLimit: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "internetTrafficLimit")), minutesLimit: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "minutesLimit")), price: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), subscriptionFee: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subscriptionFee")), title: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), typeOfFeeDebit: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "typeOfFeeDebit")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset? Deserialize_DateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetSubscriberBuilder : global::StrawberryShake.OperationResultBuilder<global::GraphqlClient.IGetSubscriberResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetSubscriberBuilder(global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetSubscriberResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetSubscriberResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetSubscriberResultInfo(Deserialize_IGetSubscriber_Subscriber(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subscriber")));
        }

        private global::GraphqlClient.State.SubscriberData? Deserialize_IGetSubscriber_Subscriber(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Subscriber", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphqlClient.State.SubscriberData(typename, dateOfBirth: Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfBirth")), dateOfCreation: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfCreation")), dateOfUpdate: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfUpdate")), email: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), firstName: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")), id: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), lastName: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), patronymic: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "patronymic")), phoneNumber: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phoneNumber")), rating: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rating")), tariffId: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tariffId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? Deserialize_DateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? Deserialize_Int32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetTariffBuilder : global::StrawberryShake.OperationResultBuilder<global::GraphqlClient.IGetTariffResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetTariffBuilder(global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetTariffResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetTariffResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetTariffResultInfo(Deserialize_IGetTariff_Tariff(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tariff")));
        }

        private global::GraphqlClient.State.TariffData? Deserialize_IGetTariff_Tariff(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Tariff", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphqlClient.State.TariffData(typename, dateOfCreation: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfCreation")), dateOfUpdate: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfUpdate")), description: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), id: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), internetTrafficLimit: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "internetTrafficLimit")), minutesLimit: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "minutesLimit")), price: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), subscriptionFee: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subscriptionFee")), title: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), typeOfFeeDebit: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "typeOfFeeDebit")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset? Deserialize_DateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GetServiceBuilder : global::StrawberryShake.OperationResultBuilder<global::GraphqlClient.IGetServiceResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetServiceBuilder(global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetServiceResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetServiceResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetServiceResultInfo(Deserialize_IGetService_Service(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "service")));
        }

        private global::GraphqlClient.State.ServiceData? Deserialize_IGetService_Service(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Service", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphqlClient.State.ServiceData(typename, dateOfCreation: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfCreation")), dateOfUpdate: Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfUpdate")), description: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), expirationDate: Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expirationDate")), id: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), price: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), title: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset? Deserialize_DateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class SubscriberData
    {
        public SubscriberData(global::System.String __typename, global::System.DateTimeOffset? dateOfBirth = default !, global::System.DateTimeOffset? dateOfCreation = default !, global::System.DateTimeOffset? dateOfUpdate = default !, global::System.String? email = default !, global::System.String? firstName = default !, global::System.Int32? id = default !, global::System.String? lastName = default !, global::System.String? patronymic = default !, global::System.String? phoneNumber = default !, global::System.Int32? rating = default !, global::System.Int32? tariffId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            DateOfBirth = dateOfBirth;
            DateOfCreation = dateOfCreation;
            DateOfUpdate = dateOfUpdate;
            Email = email;
            FirstName = firstName;
            Id = id;
            LastName = lastName;
            Patronymic = patronymic;
            PhoneNumber = phoneNumber;
            Rating = rating;
            TariffId = tariffId;
        }

        public global::System.String __typename { get; }

        public global::System.DateTimeOffset? DateOfBirth { get; }

        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String? Email { get; }

        public global::System.String? FirstName { get; }

        public global::System.Int32? Id { get; }

        public global::System.String? LastName { get; }

        public global::System.String? Patronymic { get; }

        public global::System.String? PhoneNumber { get; }

        public global::System.Int32? Rating { get; }

        public global::System.Int32? TariffId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class ServiceData
    {
        public ServiceData(global::System.String __typename, global::System.DateTimeOffset? dateOfCreation = default !, global::System.DateTimeOffset? dateOfUpdate = default !, global::System.String? description = default !, global::System.DateTimeOffset? expirationDate = default !, global::System.Int32? id = default !, global::System.Int32? price = default !, global::System.String? title = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            DateOfCreation = dateOfCreation;
            DateOfUpdate = dateOfUpdate;
            Description = description;
            ExpirationDate = expirationDate;
            Id = id;
            Price = price;
            Title = title;
        }

        public global::System.String __typename { get; }

        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String? Description { get; }

        public global::System.DateTimeOffset? ExpirationDate { get; }

        public global::System.Int32? Id { get; }

        public global::System.Int32? Price { get; }

        public global::System.String? Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class TariffData
    {
        public TariffData(global::System.String __typename, global::System.DateTimeOffset? dateOfCreation = default !, global::System.DateTimeOffset? dateOfUpdate = default !, global::System.String? description = default !, global::System.Int32? id = default !, global::System.Int32? internetTrafficLimit = default !, global::System.Int32? minutesLimit = default !, global::System.Int32? price = default !, global::System.Int32? subscriptionFee = default !, global::System.String? title = default !, global::System.String? typeOfFeeDebit = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            DateOfCreation = dateOfCreation;
            DateOfUpdate = dateOfUpdate;
            Description = description;
            Id = id;
            InternetTrafficLimit = internetTrafficLimit;
            MinutesLimit = minutesLimit;
            Price = price;
            SubscriptionFee = subscriptionFee;
            Title = title;
            TypeOfFeeDebit = typeOfFeeDebit;
        }

        public global::System.String __typename { get; }

        public global::System.DateTimeOffset? DateOfCreation { get; }

        public global::System.DateTimeOffset? DateOfUpdate { get; }

        public global::System.String? Description { get; }

        public global::System.Int32? Id { get; }

        public global::System.Int32? InternetTrafficLimit { get; }

        public global::System.Int32? MinutesLimit { get; }

        public global::System.Int32? Price { get; }

        public global::System.Int32? SubscriptionFee { get; }

        public global::System.String? Title { get; }

        public global::System.String? TypeOfFeeDebit { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public partial class GraphqlClientStoreAccessor : global::StrawberryShake.IStoreAccessor
    {
        public global::StrawberryShake.IOperationStore OperationStore => throw new global::System.NotSupportedException("OperationStore is not supported in store less mode");
        public global::StrawberryShake.IEntityStore EntityStore => throw new global::System.NotSupportedException("EntityStore is not supported in store less mode");
        public global::StrawberryShake.IEntityIdSerializer EntityIdSerializer => throw new global::System.NotSupportedException("EntityIdSerializer is not supported in store less mode");
        public global::StrawberryShake.IOperationRequestFactory GetOperationRequestFactory(global::System.Type resultType)
        {
            throw new global::System.NotSupportedException("GetOperationRequestFactory is not supported in store less mode");
        }

        public global::StrawberryShake.IOperationResultDataFactory GetOperationResultDataFactory(global::System.Type resultType)
        {
            throw new global::System.NotSupportedException("GetOperationResultDataFactory is not supported in store less mode");
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.10.0")]
    public static partial class GraphqlClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::GraphqlClient.State.GraphqlClientStoreAccessor> AddGraphqlClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::GraphqlClient.State.GraphqlClientStoreAccessor());
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetSubscribersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetServicesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetTariffsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetSubscriberQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetTariffQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetServiceQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GraphqlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.IGraphqlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::GraphqlClient.State.GraphqlClientStoreAccessor>("GraphqlClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GraphqlClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetSubscribersResult>, global::GraphqlClient.State.GetSubscribersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetSubscribersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.IGetSubscribersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetSubscribersResult>, global::GraphqlClient.State.GetSubscribersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphqlClient.IGetSubscribersResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetSubscribersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetSubscribersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.GetSubscribersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.IGetSubscribersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetSubscribersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetServicesResult>, global::GraphqlClient.State.GetServicesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetServicesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.IGetServicesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetServicesResult>, global::GraphqlClient.State.GetServicesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphqlClient.IGetServicesResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetServicesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetServicesResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.GetServicesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.IGetServicesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetServicesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetTariffsResult>, global::GraphqlClient.State.GetTariffsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetTariffsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.IGetTariffsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetTariffsResult>, global::GraphqlClient.State.GetTariffsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphqlClient.IGetTariffsResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetTariffsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetTariffsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.GetTariffsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.IGetTariffsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetTariffsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetSubscriberResult>, global::GraphqlClient.State.GetSubscriberResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetSubscriberResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.IGetSubscriberQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetSubscriberResult>, global::GraphqlClient.State.GetSubscriberBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphqlClient.IGetSubscriberResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetSubscriberResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetSubscriberResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.GetSubscriberQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.IGetSubscriberQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetSubscriberQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetTariffResult>, global::GraphqlClient.State.GetTariffResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetTariffResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.IGetTariffQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetTariffResult>, global::GraphqlClient.State.GetTariffBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphqlClient.IGetTariffResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetTariffResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetTariffResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.GetTariffQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.IGetTariffQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetTariffQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetServiceResult>, global::GraphqlClient.State.GetServiceResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphqlClient.IGetServiceResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.IGetServiceQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetServiceResult>, global::GraphqlClient.State.GetServiceBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphqlClient.IGetServiceResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetServiceResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphqlClient.IGetServiceResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.GetServiceQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.IGetServiceQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GetServiceQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.GraphqlClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphqlClient.IGraphqlClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphqlClient.GraphqlClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
